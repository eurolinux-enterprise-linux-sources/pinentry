/****************************************************************************
** Meta object code from reading C++ file 'pinentrydialog.h'
**
** Created: Mon Mar 16 13:03:03 2009
**      by: The Qt Meta Object Compiler version 59 (Qt 4.4.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "pinentrydialog.h"
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'pinentrydialog.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 59
#error "This file was generated using the moc from 4.4.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
static const uint qt_meta_data_PinEntryDialog[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       3,   10, // methods
       4,   25, // properties
       0,    0, // enums/sets

 // signals: signature, parameters, type, tag, flags
      16,   15,   15,   15, 0x05,
      27,   15,   15,   15, 0x05,

 // slots: signature, parameters, type, tag, flags
      38,   15,   15,   15, 0x0a,

 // properties: name, type, flags
      72,   64, 0x0a095103,
      84,   64, 0x0a095103,
     101,   90, 0x0009510b,
     105,   64, 0x0a095103,

       0        // eod
};

static const char qt_meta_stringdata_PinEntryDialog[] = {
    "PinEntryDialog\0\0accepted()\0rejected()\0"
    "updateQuality(secqstring)\0QString\0"
    "description\0error\0secqstring\0pin\0"
    "prompt\0"
};

const QMetaObject PinEntryDialog::staticMetaObject = {
    { &QDialog::staticMetaObject, qt_meta_stringdata_PinEntryDialog,
      qt_meta_data_PinEntryDialog, 0 }
};

const QMetaObject *PinEntryDialog::metaObject() const
{
    return &staticMetaObject;
}

void *PinEntryDialog::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_PinEntryDialog))
        return static_cast<void*>(const_cast< PinEntryDialog*>(this));
    return QDialog::qt_metacast(_clname);
}

int PinEntryDialog::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDialog::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: accepted(); break;
        case 1: rejected(); break;
        case 2: updateQuality((*reinterpret_cast< const secqstring(*)>(_a[1]))); break;
        }
        _id -= 3;
    }
#ifndef QT_NO_PROPERTIES
      else if (_c == QMetaObject::ReadProperty) {
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QString*>(_v) = description(); break;
        case 1: *reinterpret_cast< QString*>(_v) = error(); break;
        case 2: *reinterpret_cast< secqstring*>(_v) = pin(); break;
        case 3: *reinterpret_cast< QString*>(_v) = prompt(); break;
        }
        _id -= 4;
    } else if (_c == QMetaObject::WriteProperty) {
        void *_v = _a[0];
        switch (_id) {
        case 0: setDescription(*reinterpret_cast< QString*>(_v)); break;
        case 1: setError(*reinterpret_cast< QString*>(_v)); break;
        case 2: setPin(*reinterpret_cast< secqstring*>(_v)); break;
        case 3: setPrompt(*reinterpret_cast< QString*>(_v)); break;
        }
        _id -= 4;
    } else if (_c == QMetaObject::ResetProperty) {
        _id -= 4;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 4;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 4;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 4;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 4;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 4;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}

// SIGNAL 0
void PinEntryDialog::accepted()
{
    QMetaObject::activate(this, &staticMetaObject, 0, 0);
}

// SIGNAL 1
void PinEntryDialog::rejected()
{
    QMetaObject::activate(this, &staticMetaObject, 1, 0);
}
QT_END_MOC_NAMESPACE
